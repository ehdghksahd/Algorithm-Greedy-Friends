import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));


        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int[] targets = new int[M];
        for (int i = 0; i < M; i++) {
            targets[i] = Integer.parseInt(st.nextToken());
        }

        LinkedList<Integer> dq = new LinkedList<>();
        for (int i = 1; i <= N; i++) {
            dq.addLast(i);
        }

        int answer = 0;

        for (int target : targets) {

            int targetIndex = dq.indexOf(target);
            int currentSize = dq.size();

            int centerIndex;
            if (currentSize % 2 == 0) {
                centerIndex = currentSize / 2;
            } else {
                centerIndex = (currentSize / 2) + 1;
            }

            if (targetIndex < centerIndex) {
                answer += targetIndex;

                for (int i = 0; i < targetIndex; i++) {
                    dq.addLast(dq.removeFirst());
                }

            } else {
                int rotations = currentSize - targetIndex;
                answer += rotations;

                for (int i = 0; i < rotations; i++) {
                    dq.addFirst(dq.removeLast());
                }
            }
            dq.removeFirst();
        }

        System.out.println(answer);
    }
}